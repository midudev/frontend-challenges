<script type='module'>
	class PasswordOutput extends HTMLElement {
		constructor() {
			super()
			this.attachShadow({ mode: 'open' })
			this.password = this.getAttribute('password')
		}

		static get observedAttributes() {
			return ['password']
		}

		static get styles() {
			return /* css */ `
				.output-container{
					display: flex;
					flex-wrap: nowrap;
					padding: 8px;
					font-size: 1.25rem;
					background-color: var(--color-background-form-inside);
				}

				.output-field {
					flex-grow: 1;
					overflow: hidden;
					text-overflow: ellipsis;
					white-space: nowrap;
				}

				.copy-button {
					display: flex;
					justify-content: center;
					align-items: center;
					border: none;
					color: var(--color-details);
					background-color: transparent;
				}

				@media (hover: hover) {
					.copy-button:hover {
						transform: scale(1.2);
					}
				}

				.copy-icon {
					width: 1.5rem;
				}
			`
		}

		copyPassword() {
			navigator.clipboard.writeText(this.password)

			this.output.innerHTML = 'Copiado'
			setTimeout(() => {
				this.output.innerHTML = this.password
			}, 1000)
		}

		setup() {
			this.output = this.shadowRoot.querySelector('#password')
			this.button = this.shadowRoot.querySelector('#copy-button')
			this.button.addEventListener('click', this.copyPassword)
		}

		connectedCallback() {
			this.copyPassword = this.copyPassword.bind(this)
			this.render()
			this.setup()
		}

		attributeChangedCallback(name, oldValue, newValue) {
			if (name === 'password') {
				this.password = newValue
				this.render()
				this.setup()
			}
		}

		disconnectedCallback() {
			this.button.removeEventListener('click', this.copyPassword)
		}

		render() {
			this.shadowRoot.innerHTML = /* html */ `
				<style>${PasswordOutput.styles}</style>
				<section class="output-container">
					<output id="password" class="output-field" name="password">${this.password}</output>
					<button id="copy-button" class="copy-button" aria-label="Copiar" title="Copiar" type="button">
						<svg class="copy-icon" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 0 1-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 0 1 1.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 0 0-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 0 1-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 0 0-3.375-3.375h-1.5a1.125 1.125 0 0 1-1.125-1.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H9.75"/></svg>
					</button>
				</section>
			`
		}
	}

	customElements.define('password-output', PasswordOutput)
</script>
