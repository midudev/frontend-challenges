---
import PasswordInputsDefinition from './PasswordInputsDefinition.astro'
import PasswordOutputDefinition from './PasswordOutputDefinition.astro'
---

<PasswordOutputDefinition />
<PasswordInputsDefinition />
<script type='module'>
	class PasswordForm extends HTMLElement {
		constructor() {
			super()
			this.attachShadow({ mode: 'open' })
		}

		static get styles() {
			return /* css */ `
				:host {
					color: var(--color-words);
				}

				.container{
					--size-padding: 16px;
					--size-width: calc(100vw - calc(var(--size-padding) *2));
					--size-width-min: calc(280px - calc(var(--size-padding) *2));
					--size-width-max: calc(360px - calc(var(--size-padding) *2));

					display: flex;
					flex-direction: column;
					justify-content: center;
					align-items: center;
					width: clamp(var(--size-width-min), var(--size-width), var(--size-width-max));
					padding: var(--size-padding);
					background-color: var(--color-background-form);
					gap: 16px;
				}

				.container > * {
					width: 100%;
				}

				.button {
					padding: 4px;
					border: 2px solid var(--color-details);
					color: var(--color-background-form);
					font-weight: bold;
					font-size: 1.1rem;
					background-color: var(--color-details);
				}

				@media (hover: hover) {
					.button:hover {
						color: var(--color-details);
						background-color: var(--color-background-form);
					}
				}
			`
		}

		generatePassword(options = { length: 8 }) {
			const length = options.length == null || options.length < 8 ? 8 : options.length
			const characters =
				'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz~!@#$%^&*()_-+={[}]|:;,>.?/'
			let password = ''
			for (let i = 0; i < length; i++) {
				password += characters.charAt(Math.floor(Math.random() * characters.length))
			}
			return password
		}

		handleSubmit(event) {
			event.preventDefault()
			const newPassword = this.generatePassword(this.inputsValues)
			this.output.setAttribute('password', newPassword)
		}

		connectedCallback() {
			this.render()
			this.form = this.shadowRoot.querySelector('#generator')
			this.output = this.shadowRoot.querySelector('password-output')
			this.inputsValues = this.shadowRoot.querySelector('password-inputs').inputsValues
			this.handleSubmit = this.handleSubmit.bind(this)
			this.form.addEventListener('submit', this.handleSubmit)
		}

		disconnectedCallback() {
			this.form.removeEventListener('submit', this.handleSubmit)
		}

		render() {
			this.shadowRoot.innerHTML = /* html */ `
				<style>${PasswordForm.styles}</style>
				<form id="generator" class="container">
					<password-output password="${this.generatePassword()}"></password-output>
					<password-inputs></password-inputs>
					<button class="button" type="submit">Generar</button>
				</form>
			`
		}
	}

	customElements.define('password-form', PasswordForm)
</script>
